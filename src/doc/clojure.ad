= Clojure Programming
[.etp]
https://github.com/stardog-union/stardog-docs/edit/develop/src/doc/clojure.ad[Edit This Section]&nbsp;image:e1.png[Edit,16,16]
++++
<div style="clear: both;"></div>
++++

The stardog-clj http://github.com/complexible/stardog-clj[source code]
is available as Apache 2.0 licensed code.

== Installation

Stardog-clj is available from Clojars.  To use, just include the following dependency:

[source,clojure]
----
[stardog-clj "2.2.2"]
----

Starting with Stardog 2.2.2, the stardog-clj version always matches the
latest release of Stardog.

== Overview

Stardog-clj provides a set of functions as API wrappers to the native SNARL API.
These functions provide the basis for working with Stardog, starting with
connection management, connection pooling, and the core parts of the API, such
as executing a SPARQL query or adding and removing RDF from the Stardog
database.  Over time, other parts of the Stardog API will be appropriately
wrapped with Clojure functions and idiomatic Clojure data structures.

Stardog-clj provides the following features:

. Specification based descriptions for connections, and corresponding
"connection" and "with-connection-pool" functions and macros
. Functions for query, ask, graph, and update to execute `SELECT`, `ASK`,
`CONSTRUCT`, and SPARQL Update queries respectively
. Functions for insert and remove, for orchestrating the Adder and Remover APIs
in SNARL
. Macros for resource handling, including with-connection-tx,
with-connection-pool, and with-transaction
. Support for programming Stardog applications with either the connection pool
or direct handling of the connection
. Idiomatic clojure handling of data structures, with converters that can be
passed to query functions

The API with source docs can be found in the `stardog.core` and `stardog.values` namespaces.

== API Overview

The API provides a natural progression of functions for interacting with Stardog

[source,clojure]
----
(create-db-spec "testdb" "snarl://localhost:5820/" "admin" "admin" "none")
----

This creates a connection space for use in `connect` or `make-datasource` with the potential parameters:

[source,clojure]
----
{:url "snarl://localhost:5820/" :db "testdb" :pass "admin" :user "admin" :max-idle 100 :max-pool 200 :min-pool 10 :reasoning false}
----

Create a single Connection using the database spec. Can be used with
`with-open`, `with-transaction`, and `with-connection-tx` macros.

[source,clojure]
----
(connect db-spec)
----

Creates a data source, i.e. `ConnectionPool`, using the database spec.  Best used
within the `with-connection-pool` macro.

[source,clojure]
----
(make-datasource db-spec)
----

Executes the body with a transaction on each of the connections. Or establishes
a connection and a transaction to execute the body within.


[source,clojure]
----
(with-transaction [connection...] body)
(with-connection-tx binding-forms body)
----

Evaluates body in the context of an active connection obtained from the
connection pool.

[source,clojure]
----
(with-connection-pool [con pool] .. con, body ..)
----

////
Using these functions, queries can then be made against the database.

`query`

Executes a query and returns results. When constructing a query from text, the parameters are:

-   connection: The connection to query over (required).
-   text: The text of the connection (String - required).

Remaining argument are optional, and may be positional args, a map of args, or named args. Mapped and named args use the keys:

-   base, parameters, reasoning, limit, offset, converter, key-converter

Positional arguments are in order:

-   base: The base URI for the query (String).
-   parameters: A parameter map to bind parameters in the query (Map).
-   reasoning: The reasoning flag (boolean).
-   converter: A function to convert returned values with (Function).
-   key-converter: A function to convert returned binding names with (Function).
-   limit: The limit for the result. Must be present to use offset (integer).
-   offset: The offset to start the result (integer)."

////



== Examples

Here are some examples of using stardog-clj

=== Create a connection and run a query

[source,clojure]
----
include::https://gist.githubusercontent.com/AlBaker/10039066/raw/Stardog.clj[]
----

=== Insert data

[source,clojure]
----
include::https://gist.githubusercontent.com/AlBaker/10039743/raw/StardogInsert.clj[]
----

=== Run a query with a connection pool

[source,clojure]
----
include::https://gist.githubusercontent.com/AlBaker/10041003/raw/StardogPool.clj[]
----

=== SPARQL Update

[source,clojure]
----
include::https://gist.githubusercontent.com/AlBaker/11130645/raw/StardogUpdate.clj[]
----

=== Graph function for Construct queries

[source,clojure]
----
include::https://gist.githubusercontent.com/AlBaker/11130603/raw/StardogGraph.clj[]
----

=== Ask function for ASK queries

[source,clojure]
----
include::https://gist.githubusercontent.com/AlBaker/11130618/raw/StardogAsk.clj[]
----
