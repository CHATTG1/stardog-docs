= Property Graphs

In addition to RDF, SPARQL, OWL, and SNARL, Stardog supports the non-semantic
http://tinkerpop.incubator.apache.org/docs/{tp3-version}/#intro[property
graph model], Gremlin graph traversal language, and http://tinkerpop.com/[Apache
TinkerPop 3] APIs. For information on how to use the TinkerPop 3, please refer
to its
http://tinkerpop.incubator.apache.org/docs/{tp3-version}[documentation].
Details about Stardog's support for
http://tinkerpop.incubator.apache.org/docs/{tp3-version}/#_features[TinkerPop
3 Features] can be found in
link:/java/snarl/com/complexible/stardog/gremlin/features/StardogFeatureSet.html[Stardog
Feature Set].

NOTE: Stardog `{version}` supports TinkerPop `{tp3-version}`.

== Motivation & Implementation

Stardog's implementation of TinkerPop 3 is based ultimately on a (seamless and
opaque) translation to and from RDF, in which Stardog persists all vertices,
edges and properties. In order to support edge properties in the RDF model,
Stardog includes a reification function which allows statement identifiers to be
used as the subject of an RDF quad; this extends the RDF Quad model used in
Stardog to have a notion of virtual "quints".

Having virtual quints in Stardog lets us manipulate existing RDF content as a
property graph; but, most importantly, it lets us use Stardog capabilities
(reasoning, ICV, etc) with property graphs. Reification extends existing Stardog
graph database and let users add edge properties if required via the TinkerPop 3
or even SPARQL.

Okay, so why add property graph support to Stardog? A few reasons:

1. sometimes you need to traverse, rather than query, a graph
1. sometimes you need to traverse a *semantic* graph

=== Example

Loading the
http://tinkerpop.incubator.apache.org/docs/{tp3-version}/#intro[TinkerGraph
Modern] graph via TinkerPop 3 (using Gremlin Console), using the described
<<Graph Configuration>>:

[source, groovy]
----
Graph graph = StardogGraphFactory.open(...)  // <1>
graph.io(graphml()).readGraph('data/tinkerpop-modern.xml')  // <2>
----
<1> Get the Graph from the `StardogGraphFactory`
<2> Load the graph `tinkerpop-modern` included in Gremlin Console distribution at `data/tinkerpop-modern.xml`.

That produces the following internal representation in Stardog:

[source,turtle]
----
include::https://gist.githubusercontent.com/edgarRd/c20e5bd963e7526c54f3/raw/13a54e8fc771a33c2fa6ef42f98904c7d7265c1b/tinkerpop-modern.ttl[]
----

WARNING: This translation between RDF and property graph models is transparent
to the user. It just works. But, of course, since in the end it's just RDF, you
can always query or interact with it as RDF directly using SPARQL, Jena, Sesame,
or SNARL code, etc. However, the mapping between Property Graphs and RDF is
*not* considered part of Stardog's <<Compatibility Policies,contract>> so it may
change without notice. You've been warned!

Getting properties for in-edges for a vertex from the previous graph, using the TinkerPop 3 API:
[source,groovy]
----
g = graph.traversal()                        //<1>
g.V('https://www.tinkerpop.com/software-5964a0af-1bb4-4469-b362-6b7db5e617e2').inE().properties()  // <2>
g.V().has('name','lop').inE().properties()  // <3>
----
<1> Get a traversal that can be reused
<2> Get a vertex using its IRI Id and list in-edge properties
<3> Get a vertex filtering by name and list in-edge properties

=== Integration with SPARQL

Access to the reification function is available via SPARQL in order to be able
to query edge properties created via the TinkerPop 3 API, e.g. query to find the
first 10 edge properties, excluding the label:

[source,sparql]
----
select ?srcName ?edgeLabel ?destName ?edgeProp ?val where {
  ?src ?pred ?dest .
  ?src tp:name ?srcName .
  ?dest tp:name ?destName .
  BIND(stardog:identifier(?src, ?pred, ?dest) as ?edgeId) . //<1>
  ?edgeId rdfs:label ?edgeLabel .
  ?edgeId ?edgeProp ?val .
  FILTER (?edgeProp != rdfs:label) .
} limit 10
----
<1> Using the `stardog:identifier()` (aka "reification") function.

=== Database Configuration

Any Stardog database should work out-of-the-box with the Stardog TinkerPop 3
implementation, but given that Stardog enables by default
http://docs.stardog.com/java/snarl/com/complexible/stardog/index/IndexOptions.html#CANONICAL_LITERALS[RDF
literal canonicalization], some property value types may not be as expected when
fetching them from the TinkerPop 3 graph. To allow for better compatibility
between TinkerPop 3 and Stardog, the setting `index.literals.canonical` must be
disabled in the database at creation time, using the following command:

[source,bash]
----
$ stardog-admin db create -o index.literals.canonical=false -n <dbname>
----

=== Graph Configuration

In order to create TinkerPop 3 graphs, a configuration object must be created to
set up the graph. The TinkerPop 3 implementation for Stardog contains a tool for
creating this configuration easily, supporting many of the features available in
Stardog, such as reasoning and named-graphs. The
http://docs.stardog.com/java/snarl/com/complexible/stardog/gremlin/StardogGraphConfiguration.html[StardogGraphConfiguration],
is available via the API or the Gremlin Console in Groovy.

[source,groovy]
----
gremlin> graphConf = StardogGraphConfiguration.builder()
...
gremlin> graphConf.connectionString("snarl://localhost:5820/mygraph").credentials("admin", "admin")
...
gremlin> graphConf.baseIRI("http://tinkerpop.incubator.apache.org/").reasoning(false)
==>gremlin.graph=tag:stardog:api:context:default
stardog.computer.cache_size=5000
stardog.label_iri=http://www.w3.org/2000/01/rdf-schema#label
stardog.connection=snarl://localhost:5820/mygraph
stardog.user=admin
stardog.password=admin
stardog.base_iri=http://tinkerpop.incubator.apache.org/
stardog.reasoning_enabled=false
gremlin> graph = StardogGraphFactory.open(graphConf.build())
==>cachedstardoggraph[cachedstardoggraph]
----

== Stardog & Gremlin Console

Stardog's TinkerPop 3 implementation includes a plugin for
http://tinkerpop.incubator.apache.org/docs/{tp3-version}/#gremlin-console[Gremlin
Console, window="_blank"].

=== Installation

The following steps describe how to install the Stardog plugin into the Gremlin console:

[start=1]
. Create `stardog-gremlin/plugin` directory within the `ext/` directory in the Gremlin console directory.

[source,bash]
----
~/gremlin-console/ext/$ mkdir -p stardog-gremlin/plugin
----

[start=2]
. Flat-copy all Stardog client jar files to the directory created in the previous step.

[source,bash]
----
~/gremlin-console/ext/stardog-gremlin/plugin$ find stardog/client -iname '*.jar' -exec cp \{\} . \;
----

[start=3]
. Make sure the jar file `stardog-gremlin-X.X.X.jar` is contained in the `stardog-gremlin/plugin` directory along with all other Stardog jars; copy the jar if it doesn't exist.

. Start the Gremlin Console and make sure the `complexible.stardog` plugin has been loaded.

[source,bash]
----
~/gremlin-console$ bin/gremlin.sh
         \,,,/
         (o o)
-----oOOo-(3)-oOOo-----
plugin activated: tinkerpop.server
plugin activated: tinkerpop.utilities
plugin activated: tinkerpop.tinkergraph
gremlin> :plugin list
==>tinkerpop.server[active]
==>tinkerpop.gephi
==>tinkerpop.utilities[active]
==>tinkerpop.sugar
==>complexible.stardog
==>tinkerpop.tinkergraph[active]
----

[start=5]
. Activate the `complexible.stardog` plugin in Gremlin Console

[source,groovy]
----
gremlin> :plugin use complexible.stardog
==>complexible.stardog activated
----

[start=6]
. You're done installing the stardog-gremlin plugin for Gremlin Console. Now you can create a `StardogGraph` and start exploring the TinkerPop 3 API with Stardog.

=== Using a Stardog Graph

The following describes the process to create a `StardogGraph` and explore data
in Stardog using the TinkerPop 3 API via the Gremlin Console.

The only requirement is that you have an existent database in Stardog as directed in
<<Database Configuration>>, which could be in-memory or disk based. Assuming you already installed the Stardog plugin
for the Gremlin Console and it is active, start the Gremlin Console.

[source,bash]
----
gremlin-console$ bin/gremlin.sh
----

In the Gremlin Console, create the configuration settings for opening the
`StardogGraph`. Assuming the Stardog server is running in `localhost:5820`, the
user is `admin` and password `admin`.

[source,groovy]
----
gremlin> graphConf = StardogGraphConfiguration.builder()
...
gremlin> graphConf.connectionString("snarl://localhost:5820/mygraph").credentials("admin", "admin").baseIRI("http://tinkerpop.incubator.apache.org/")
==>gremlin.graph=tag:stardog:api:context:default
stardog.computer.cache_size=5000
stardog.label_iri=http://www.w3.org/2000/01/rdf-schema#label
stardog.connection=snarl://localhost:5820/mygraph
stardog.user=admin
stardog.password=admin
stardog.base_iri=http://tinkerpop.incubator.apache.org/
gremlin> graph = StardogGraphFactory.open(graphConf.build())
==>cachedstardoggraph[cachedstardoggraph]
----

==== Named Graphs

The previous commands will create a Graph within the `default` graph of the
Stardog database `mygraph`. A database can contain multiple graphs, which would
be the equivalent to `named-graphs` in Stardog.

To create a `StardogGraph` over a specific named-graph, just set the named-graph URI in the <<Graph Configuration>> for
the `StardogGraph` to create:
[source,groovy]
----
gremlin> graphConf.namedGraph("tag:graph1")
==>gremlin.graph=tag:stardog:api:context:default
...
stardog.named_graph=tag:graph1
...
----

NOTE: by default, the property `gremlin.graph` is set to the default graph in a
Stardog database; setting the `stardog.named_graph` configuration option will
override the graph option.

== Stardog & Gremlin Server

The TinkerPop 3 implementation for Stardog includes a plugin for
http://tinkerpop.incubator.apache.org/docs/3.0.0.M9-incubating/#gremlin-server[Gremlin
Server, window="_blank"].

=== Installation

The following steps describe how to install the Stardog plugin into the gremlin
server:

[start=1]
. Create `stardog-gremlin/plugin` directory within the `ext/` directory in the gremlin server directory.

[source,bash]
----
~/gremlin-server/ext/$ mkdir -p stardog-gremlin/plugin
----

[start=2]
. Flat-copy all Stardog client jar files to the directory created in the previous step.

[source,bash]
----
~/gremlin-server/ext/stardog-gremlin/plugin$ find ~/stardog/client -iname '*.jar' -exec cp \{\} . \;
----

[start=3]
. Make sure the jar file `stardog-gremlin-X.X.X.jar` is contained in the `stardog-gremlin/plugin` directory along with all other Stardog jars; copy the jar if it doesn't exist.

=== Configure Stardog Graphs

To setup a graph for use with the Gremlin Server you need to create a
configuration file in `conf/` with the Stardog graph properties. The following example file,
`stardoggraph-mygraph.properties`, contains the required properties to use a Stardog graph, described in <<Graph Configuration>>:

----
# Properties for creating a StardogGraph in Gremlin Server
gremlin.graph=com.complexible.stardog.gremlin.structure.StardogGraph
stardog.connection=snarl://localhost:5820/mygraph
stardog.user=admin
stardog.password=admin
stardog.named_graph=tag:stardog:api:graph:default
stardog.reasoning_enabled=false
----

In the previous example, `gremlin.graph` defines the TinkerPop Class
implementation to use, in this case is the `StardogGraph`. The property
`gremlin.stardog.named_graph` is required when configuring a graph in Gremlin
Server, if the graph is contained in the Stardog DB's default graph, the value
to use is: `tag:stardog:api:graph:default` as shown in the example; if other
named-graph is used, just set the value to the named-graph's `URI`. The rest of
the properties are just connection settings to the Stardog server.

Now you need to point to the Stardog graph properties file from the server
configuration file, `conf/gremlin-server.yaml`, and enable the Stardog plugin.
the following are the relevant parts of the configuration file that need to be
set:

[source,yaml]
----
graphs: {
  graph: conf/stardoggraph-mygraph.properties      # <1>
}
plugins:
  - complexible.stardog                            # <2>
...
----
<1> set the stardog graph properties
<2> enable the stardog gremlin plugin

=== Running the Gremlin Server

Having a Stardog server running, at this point you're ready to start the Gremlin Server.

[source,bash]
----
~/gremlin-server$ bin/gremlin-server.sh
----

You should see that the Gremlin Server creates an instance of the
`StardogGraph`, named `graph`, based on the properties file configured.

[source,bash]
----
[INFO] Graphs - Graph [graph] was successfully configured via [conf/stardoggraph-mygraph.properties].
----
