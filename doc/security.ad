= Security
[.etp]
https://github.com/stardog-union/stardog-docs/edit/develop/src/doc/security.ad[Edit This Section]&nbsp;image:e1.png[Edit,16,16]
++++
<div style="clear: both;"></div>
++++

Stardog's security model is based on standard role-based access control: users
have *permissions* over *resources* during *sessions*; permissions can be
grouped into *roles*; and roles can be assigned to *users*.

Stardog uses http://shiro.apache.org/[Apache Shiro] for authentication,
authorization, and session management and
http://www.mindrot.org/projects/jBCrypt/[jBCrypt] for password hashing.

== Resources

A resource is some Stardog entity or service to which access is
controlled. Resources are identified by their *type* and their *name*. A
particular resource is denoted as `type_prefix:name`. The valid resource
types with their prefixes are shown below.

.Table of System Resources
|===
|Resource |Prefix | Description

|User
|`user`
|A user (e.g., `user:admin`)

|Role
|`role`
|A role assigned to a user (`role:reader`)

|Database
|`db`
|A database (`db:myDB`)

|Named Graph
|`named-graph`
|A named graph (graph subset) (`named-graph:myDb\named-graph-id`)

|Database Metadata
|`metadata`
|Metadata of a database (`metadata:myDB`)

|Database Admin
|`admin`
|Database admin tasks (e.g., `admin:myDB`)

|Integrity Constraints
|`icv-constraints`
|Integrity constraints associated with a database (e.g., `icv-constraints:myDB`)
|===

== Permissions

Permissions are composed of a *permission subject*, an *action*, and a
*permission object*, which is interpreted as **the subject resource can
perform the specified action over the object resource**.

Permission subjects can be of type `user` or `role` only. Permission
objects can be of any valid type.

NOTE: `write` permission in Stardog refers to graph contents, including mutative
operations performed via SPARQL Update (i.e., `INSERT`, `DELETE`, etc.). The
other permissions, i.e., `create` and `delete`, apply to resources of the system
itself, i.e., users, databases, database metadata, etc.

Valid actions include the following:

`read`    :: Permits reading the resource properties
`write`   :: Permits changing the resource properties
`create`  :: Permits creating new resources
`delete`  :: Permits deleting a resource
`grant`   :: Permits granting permissions over a resource
`revoke`  :: Permits revoking permissions over a resource
`execute` :: Permits executing administration actions over a database
`all`     :: Special action type that permits all previous actions over a resource

=== Wildcards

Stardog understands the use of wildcards to represent sets of resources. A
wildcard is denoted with the character `\*`. Wildcards can be used to
create complex permissions; for instance, we can give a user the ability
to create any database by granting it a `create` permission over `db:*`.
Similarly, wildcards can be used in order to revoke multiple permissions
simultaneously.

=== Superusers

It is possible at user-creation time to specify that a given user is a
superuser. Being a superuser is equivalent to having been granted an
`all` permission over every resource, i.e., `\*:*`. Therefore, as
expected, superusers are allowed to perform any valid action over any
existing (or future) resource.

=== Database Owner Default Permissions

When a user creates a resource, it is automatically granted `delete`,
`write`, `read`, `grant`, and `revoke` permissions over the new
resource. If the new resource is a database, then the user is
additionally granted `write`, `read`, `grant`, and `revoke` permissions
over `icv-constraints:theDatabase` and `execute` permission over
`admin:theDatabase`. These latter two permissions give the owner of the
database the ability to administer the ICV constraints for the database
and to administer the database itself.

== Default Security Configuration

WARNING: Out of the box, the Stardog security setup is minimal and
**insecure**: `user:admin` with password set to "admin" is a
superuser; `user:anonymous` with password "anonymous" has the "reader"
role; `role:reader` allows `read` of any resource.

*Do not deploy Stardog in production or in hostile environments with the default
security settings.*

=== Setting Password Constraints

To setup the constraints used to validate passwords when adding new users,
configure the following settings in the `stardog.properties` configuration file.

- `password.length.min`: Sets the password policy for the minimum length of
  user passwords, the value can't be less than 1 or greater than `password.length.max`.
  Default: `4`.
- `password.length.max`: Sets the password policy for the maximum length of
  user passwords, the value can't be greater than 1024 or less than 1. Default: `20`.
- `password.regex`: Sets the password policy of accepted chars in user passwords, via a
  Java regular expression. Default: `[\\w@#$%]+`

=== Using a Password File

To avoid putting passwords into scripts or environment variables, you can put
them into a suitably secured password file. If no credentials are passed
explicitly in CLI invocations, or you do not ask Stardog to prompt you for
credentials interactively, then it will look for credentials in a password file.

On a Unix system, Stardog will look for a file called `.sdpass` in the
home directory of the user Stardog is running as; on a Windows system,
it will look for `sdpass.conf` in `Application Data\stardog` in the
home directory of the user Stardog is running as. If the file is not
found in these locations, Stardog will look in the location provided
by the `stardog.passwd.file` system property.

==== Password File Format

The format of the password file is as follows:

- any line that starts with a `#` is ignored
- each line contains a single password in the format: `hostname:port:database:username:password`.
- wildcards, `*`, are permitted for any field but the password field; colons and backslashes in fields are escaped with `\`.

For example,

[source,bash]
----
#this is my password file; there are no others like it and this one is mine anyway...
*:*:*:flannery:aNahthu8
*:*:summercamp:jemima:foh9Moaz
----

Of course you should secure this file carefully, making sure that only the user
that Stardog runs as can read it.

== Named Graph Security

include::named-graph-security.ad[]

== Enterprise Authentication

Stardog can use an LDAP server to authenticate enterprise
users. Stardog assumes the existence of two different groups to
identify regular and superusers, respectively.  Groups must be
identified with the `cn` attribute and be instances of the
`groupOfNames` object class.  Users must be specified using the
`member` attribute.

For example,

[source,ldap]
----
dn: cn=stardogSuperUsers,ou=group,dc=example,dc=com
cn: stardogSuperUsers
objectclass: groupOfNames
member: uid=superuser,ou=people,dc=example,dc=com

dn: cn=stardogUsers,ou=group,dc=example,dc=com
cn: stardogUsers
objectclass: groupOfNames
member: uid=regularuser,ou=people,dc=example,dc=com
member: uid=anotherregularuser,ou=people,dc=example,dc=com
----

Credentials and other user information are stored as usual:

[source,ldap]
----
dn: uid=superuser,ou=people,dc=example,dc=com
objectClass: inetOrgPerson
cn: superuser
sn: superuser
uid: superuser
userPassword: superpassword
----

=== Configuring Stardog

In order to enable LDAP authentication in Stardog, we need to include
the following **mandatory** properties in `stardog.properties`:

- `security.realms`: with a value of `ldap`
- `ldap.provider.url`: The URL of the LDAP server
- `ldap.security.principal`:  An LDAP user allowed to retrieve group members from the LDAP server
- `ldap.security.credentials`: The principal's password
- `ldap.user.dn.template`: A template to form LDAP names from Stardog usernames
- `ldap.group.lookup.string`: A string to lookup the Stardog user groups
- `ldap.users.cn`: The `cn` of the group identifying regular Stardog users
- `ldap.superusers.cn`: The `cn` of the group identifying Stardog super users
- `ldap.cache.invalidate.time`: The time duration to invalidate cache entries, default to `24h`.

Here's another example:

[source,ini]
----
security.realms = ldap
ldap.provider.url = ldap://localhost:5860
ldap.security.principal = uid=admin,ou=people,dc=example,dc=com
ldap.security.credentials = secret
ldap.user.dn.template = uid={0},ou=people,dc=example,dc=com
ldap.group.lookup.string = ou=group,dc=example,dc=com
ldap.users.cn = stardogUsers
ldap.superusers.cn = stardogSuperUsers
ldap.cache.invalidate.time = 1h
----

=== User Management

Users can no longer be added/removed/modified via Stardog. User
management is delegated to the LDAP server.

==== An LDAP Quirk

When Stardog manages users, instead of delegating to LDAP, when a user is
created, they are assigned the permission `read:user:$NEW_USER`. But when user
management is delegated to LDAP, this permission is not automatically created at
new user creation time in Stardog and, therefore, it should be added manually to
Stardog. If this doesn't happen, users won't be able to--among other things--log
into the Web Console.

=== Authenticated User Cache

Stardog includes a time constrained cache with a configurable time for eviction,
default to 24 hours. To disable the cache, the eviction time must be set to
`0ms`.

=== Authorization

The LDAP server is used for *authentication only*. Permissions and
roles are assigned in Stardog.

==== Stale Permissions/Roles

Permissions and roles in Stardog might refer to users that no long exist, i.e.,
those that were deleted from the LDAP server. This is safe as these users will
not be able to authenticate (see above). It is possible to configure Stardog to
periodically clean up the list of permissions and roles according to the latest
users in the LDAP server. In order to do this, we pass a
http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger[Quartz
cron expression] using the `ldap.consistency.scheduler.expression` property:

[source,bash]
----
## Execute the consistency cleanup at 6pm every day
ldap.consistency.scheduler.expression = 0 0 18 * * ?
----

== Managing Stardog Securely

Stardog resources can be managed securely by using the tools included
in the admin CLI or by programming against Stardog APIs. In this
section we describe the permissions required to manage various Stardog
resources either by CLI or API.

=== Users

Create a user                  :: `create` permission over `user:*`. Only superusers can create
other superusers.

Delete a user                  :: `delete` permission over the user.

Enable/Disable a user          :: User must be a superuser.

Change password of a user      :: User must be a superuser or user must be trying to
change its own password.

Check if a user is a superuser :: `read` permission over the user or user must be
trying to get its own info.

Check if a user is enabled     :: `read` permission over the user or user must be
trying to get its own info.

List users                     :: Superusers can see all users. Other users can see only users over
which they have a permission.

=== Roles

Create a role               :: `create` permission over `role:*`.

Delete a role               :: `delete` permission over the role.

Assign a role to a user     :: `grant` permission over the role **and** user must
have all the permissions associated to the role.

Unassign a role from a user :: `revoke` permission over the role **and** user
must have all the permissions associated to the role.

List roles                  :: Superusers can see all roles. Other users can see only roles they
have been assigned or over which they have a permission.

=== Databases

Create a database                              :: `create` permission over `db:*`.

Delete a database                              :: `delete` permission over `db:theDatabase`.

Add/Remove integrity constraints to a database :: `write` permission over
`icv-constraints:theDatabase`.

Verify a database is valid                     :: `read`
permission over `icv-constraints:theDatabase`.

Online/Offline a database                      :: `execute` permission over `admin:theDatabase`.

Migrate a database                             :: `execute` permission over `admin:theDatabase`.

Optimize a database                            :: `execute` permission over `admin:theDatabase`.

List databases                                 :: Superusers can see all databases. Regular users can see only
databases over which they have a permission.

=== Permissions

Grant a permission                                              :: `grant` permission over the permission object **and** user
must have the permission that it is trying to grant.

Revoke a permission from a user or role over an object resource :: `revoke`
permission over the permission object **and** user must have the permission that
it is trying to revoke.

List user permissions                                           :: User must be a superuser or user must be trying to get
its own info.

List role permissions                                           :: User must be a superuser or user must have been assigned
the role.

== Deploying Stardog Securely

To ensure that Stardog's RBAC access control implementation will be effective,
all non-administrator access to Stardog databases should occur over network
(i.e., non-native) database connections.footnote:[In other words, embedded Stardog
access is inherently *insecure* and should be used accordingly.]

To ensure the confidentiality of user authentication credentials when using
remote connections, the Stardog server should only accept connections that are
encrypted with SSL.

=== Configuring Stardog to use SSL

Stardog HTTP server includes native support for SSL. The SNARL server (via
`snarls://`) also supports SSL. To enable Stardog to optionally support SSL
connections, just pass `--enable-ssl` to the server start command.  If you want
to require the server to use SSL only, that is, to reject any non-SSL
connections, then use `--require-ssl`.

When starting from the command line, Stardog will use the standard Java
properties for specifying keystore information:

- `javax.net.ssl.keyStorePassword`  (the password)
- `javax.net.ssl.keyStore` (location of the keystore)
- `javax.net.ssl.keyStoreType` (type of keystore, defaults to JKS)

These properties are checked first in `stardog.properties`; then in JVM args
passed in from the command line, e.g. `-Djavax.net.ssl.keyStorePassword=mypwd`. If
you're creating a Server programmatically via `ServerBuilder`, you can specify
values for these properties using the appropriate `ServerOptions` when creating
the server.  These values will override anything specified in
`stardog.properties` or via normal JVM args.

=== Configuring Stardog Client to use SSL

Stardog HTTP client supports SSL when the `https:` scheme is used in the
database connection string; likewise, it uses SSL for SNARL when the connection
string uses the `snarls:` scheme. For example, the following invocation of the
Stardog command line utility will initiate an SSL connection to a remote
database:

[source,bash]
----
$ stardog query https://stardog.example.org/sp2b_10k "ask { ?s ?p ?o }"
----

If the client is unable to authenticate to the server, then the connection
will fail and an error message like the following will be generated.

[source,bash]
----
Error during connect.  Cause was SSLPeerUnverifiedException: peer not authenticated
----

The most common cause of this error is that the server presented a certificate
that was not issued by an authority that the client trusts. The Stardog client 
uses standard Java security components to access a store of
trusted certificates. By default, it trusts a list of certificates installed
with the Java runtime environment, but it can be configured to use a custom
trust store.footnote:[The Stardog client uses an `X509TrustManager`.
The details of how a trust store is selected to initialize the trust manager are
http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#X509TrustManager.]

The client can be directed to use a specific Java KeyStore file as a
trust store by setting the `javax.net.ssl.trustStore` system property. To
address the authentication error above, that trust store should contain the
issuer of the server’s certificate. Standard Java tools can create such a file.
The following invocation of the `keytool` utility creates a new trust store
named `my-truststore.jks` and initializes it with the certificate in
`my-trusted-server.crt`. The tool will prompt for a passphrase to associate with
the trust store. This is not used to encrypt its contents, but can be used to
ensure its integrity.footnote:[See the `javax.net.ssl.trustStorePassword` system
property docs:
http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#X509TrustManager.]

[source,bash]
----
$ keytool -importcert  -keystore my-truststore.jks -alias stardog-server -file my-trusted-server.crt
----

The following Stardog command line invocation uses the newly created
truststore.

[source,bash]
----
$ STARDOG_JAVA_ARGS=”-Djavax.net.ssl.trustStore=my-truststore.jks” 
$ stardog query https://stardog.example.org/sp2b_10k "ask { ?s ?p ?o }"
----

For custom Java applications that use the Stardog client,
the system property can be set programmatically or when the JVM is
initialized.

The most common deployment approach requiring a custom trust store is
when a self-signed certificate is presented by the Stardog server. For
connections to succeed, the Stardog client must trust the self-signed
certificate. To accomplish this with the examples given above, the
self-signed certificate should be in the `my-trusted-server.crt` file in
the keytool invocation.

A client may also fail to authenticate to the server if the hostname in the
Stardog database connection string does not match a name contained in the server
certificate.footnote:[The matching algorithm used is
described--http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html--
in the Apache docs about `BrowserCompatHostnameVerifier`.]

This will cause an error message like the following
[source,bash]
----
Error during connect.  Cause was SSLException: hostname in certificate didn't match
----

The client does not support connecting when there's a mismatch;
therefore, the only workarounds are to replace the server’s certificate or
modify the connection string to use an alias for the same server that
matches the certificate.
