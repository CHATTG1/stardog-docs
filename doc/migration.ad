= SNARL Migration Guide
[.etp]
https://github.com/stardog-union/stardog-docs/edit/develop/src/doc/migration.ad[Edit This Section]&nbsp;image:e1.png[Edit,16,16]
++++
<div style="clear: both;"></div>
++++

== Stardog 4

Stardog 4 introduces significant changes; this section provides an overview of
those changes and how they affect users.

Migration of existing, persisted information, RDF, search, spatial, etc, is
*required*. Particularly, pre-4.0 RDF indexes are not RDF 1.1 compatible and
executing queries over these older indexes could yield unexpected results,
including queries which return no results, but should. Thus migration of
persisted information can be performed automatically the first time Stardog is
started. However, because these migrations are *NOT* backward compatible and
cannot be reversed, you cannot revert to an earlier version of Stardog once they
have been updated.

NOTE: Automatic migration is disabled *by default*; this means the first time
you start Stardog 4 with an existing `$STARDOG_HOME`, *Stardog will not run*.
You must opt-in to the migration of your existing data. This can be done by
setting the Stardog configuration option `upgrade.automatic` in the
`stardog.properties` to `true`. Migration can also be allowed by using the flag
`--upgrade` to `server start`.

=== Java 8

Java 8 is now required. The public Stardog APIs have been updated to take
advantage of new additions to the JDK. Anywhere we previously accepted a
`java.io.File` as an argument, we now expect a `java.nio.file.Path`.

Within the `Getter` class, `Iteration` is no longer returned as a result,
`Stream` is instead used.  Some of the utility methods, such as
`Getter#iterator(Function)` have been removed in favor of using the resulting
`Stream` and, in this example, using its `map` method.

We have updated libraries, most notably Jena 3 and Sesame 4. In particular, the
change to Sesame 4 impacts our APIs. Anywhere `URI` was used has been changed to
`IRI`. Similarly, anything expecting or returning a `Graph` now uses `Model`.

The default base URI used for RDF parsing changed from `tag:stardog:api:`
to `http://api.stardog.com/`.

Optional migration has been removed from the API and CLI.

Finally, `StardogException` and all other exceptions used by the Stardog APIs
have been made unchecked and are now subclasses of `RuntimeException`.

=== Libraries

Most notably, Stardog now only supports Jena 3 and Sesame 4 and our bindings
have been updated accordingly.  For those using these libraries to work with
Stardog, http://jena.apache.org/documentation/migrate_jena2_jena3.html[Jena]
and http://rdf4j.org/doc/4/programming.docbook?view#Changes_in_Sesame_4[Sesame]
have posted their own migration guides.

If you're using Jena, we recommend running with `JenaRuntime.isRDF11 = true` for
maximal compatibility between the libraries.

=== RDF 1.1

Stardog 4 now supports the RDF 1.1 specification.  To learn more about the changes
in RDF 1.1, http://www.w3.org/TR/rdf11-new/[see here].

=== Configuration

The database option `transactions.durable` has been renamed `transaction.logged`
for clarity. Transactions in Stardog are always durable without additional changes
to the system. Transactions can be optionally logged, primarily for use with the
cluster's log shipping capabilities.

`waldo.default.limit` is now `search.default.limit`. Additionally, the default has
changed from `50` to `100`.  `leading.wildcard.search.enabled` is now
`search.leading.wildcard.search.enabled`; the default value is still `false`.
These options are also available as database options of the same names for
controlling this behavior on a per-database basis.

=== Cluster

The proxy component is no longer in the cluster. Nodes will forward write requests
to the master and service any reads that directly come to them.

It is suggested now that deployments use a load balancer and proxy to provide a
single address for a cluster.

For an example of an external proxy configuration see <<High Availability Cluster>>
section.

The configuration property `pack.cluster.address`, deprecated in 3.1, is no longer
used. Use `pack.zookeeper.address` instead.

In Stardog 4, you don't have to shut down the Stardog nodes independently, you only
need to issue one shutdown request which will be forwarded to all nodes in the cluster.
The ZooKeeper ensemble still has to be shut down independently.

=== Logging

We no longer use JUL for logging; we use http://logging.apache.org/log4j/2.x/[Log4j 2].

The entire logging configuration is managed by log4j; therefore, `server start` and
`cluster zkstart` no longer take a `--logfile` option. Instead, the default logging
behavior is overridden by placing a log4j2 configuration file in `$STARDOG_HOME`.

The default behavior is to log to `$STARDOG_HOME/stardog.log` using a buffered,
synchronous file appender. This means that it will write to a buffer first but every
log record is flushed to disk once the entire record is finished writing.

== Stardog 3

This section guides migration from Stardog 2.x to Stardog 3.

=== Reasoning

`ReasoningType` is no longer a `Connection` client option.  Reasoning is now
enabled, or disabled; the database will determine the appropriate OWL profile to
use given the TBox associated with the database. Therefore, the CLI commands that
optionally accept `-r, --reasoning` argument does not need a level value. The
commands that required a reasoning level in 2.x does not need a `-r, --reasoning`
argument anymore as they enable reasoning automatically.

The default value of `reasoning.schema.graphs` has been changed to `ALL` from
`DEFAULT`.

=== Custom Functions and Aggregates

The API for custom SPARQL functions has changed in Stardog 3 to accommodate the
addition of custom SPARQL aggregates.  A discussion on how to create custom
functions and aggregates can be found
https://github.com/complexible/stardog-examples/tree/master/examples/function[in the examples].

=== Database Properties

In Stardog 3, `DatabaseOptions` no longer serves as a single collection of all
options for the system.  Module-specific options have been split into their
respective modules.  For example, all options dealing with configuration of
the reasoner in Stardog--those whose names are prefixed with `reasoning`, such
as `SCHEMA_GRAPHS`--have been moved to `ReasoningOptions`.  Similar changes were
made for `ICVOptions` and `SearchOptions`.

`query.all.graphs` can now be set as a database option too. If there is no value
set for this option in the database metadata, the default value specified in the
`stardog.properties` file will be used.

The database connection timeout option is now called `database.connection.timeout`
and it accepts duration strings such as `1h` or `10m`. This option can be set
either in `stardog.properties` or in the database metadata.

=== Empire

The https://github.com/mhgrove/Empire[Empire] bindings for Stardog have been
released under Apache license and are no longer part of the Stardog
distribution. They are now available in the Empire code base in the `stardog`
module.

=== API

The following methods were added to the SNARL API:

* `Getter#ask`
* `ConnectionConfiguration#setAll`

Additionally, the Search API now exposes the ability to execute searches over
named graphs, which was previously only available via SPARQL.

== Stardog 2

This document guides migration of code from SNARL 1.0 to SNARL 2.0 API.

=== Deprecating and Renaming

- All deprecated methods have been removed.
- All `com.clarkparsia` packages have been moved to `com.complexible`.
- `com.clarkparsia.stardog.reasoning.ReasoningType` has been moved to `com.complexible.stardog.reasoning.api.ReasoningType`.
- `com.clarkparsia.openrdf.query` has been moved to `org.openrdf.queryrender`.
- Everything else in `com.clarkparsia.openrdf` has been moved to `com.complexible.common.openrdf`.
- All methods marked @Beta have been promoted.

=== Queries

We introduced a new hierarchy for the class `com.complexible.stardog.api.Query`:

[source,Java]
----
+ com.complexible.stardog.api.Query
	+ com.complexible.stardog.api.ReadQuery
		+ com.complexible.stardog.api.BooleanQuery
		+ com.complexible.stardog.api.GraphQuery
		+ com.complexible.stardog.api.SelectQuery
	+ com.complexible.stardog.api.UpdateQuery
----

Queries can be created from a `com.complexible.stardog.api.Connection` object
using the suitable method according to desired type of query: `select`, `ask`,
`graph`, or `update`.

Now you can specify the reasoning type with which a particular
`com.complexible.stardog.api.ReadQuery` is to be executed via the method
`reasoning(ReasoningType)`. The query reasoning type overrides the reasoning
type of the parent connection. Note that setting the reasoning type to
`ReasoningType.NONE` will disable reasoning for that particular query, it does
not affect the default reasoning specified by the `Connection`.

The methods `executeAsk()`, `executeSelect()`, and `executeGraph()` on
`com.complexible.stardog.api.Query` have been removed. Queries can be executed
by using the `execute()` method which will return a value appropriate for the
type of query being executed.

=== Connections

The class `com.complexible.stardog.api.admin.StardogDBMS` was removed.  It has
been replaced by
`com.complexible.stardog.api.admin.AdminConnectionConfiguration` for creating
connections to the Stardog DBMS and
`com.complexible.stardog.api.admin.AdminConnection` for the actual connection.

The method `login` on `com.complexible.stardog.api.admin.StardogDBMS` (now
`com.complexible.stardog.api.admin.AdminConnectionConfiguration`) has been
renamed `connect` to align with usage of the standard
`com.complexible.stardog.api.ConnectionConfiguration`

The method `connect(ReasoningType)` on
`com.complexible.stardog.api.ConnectionConfiguration` has been removed.

The method `getBaseConnection()` on
`com.complexible.stardog.api.reasoning.ReasoningConnection` has been removed.
To obtain a `ReasoningConnection` from a base connection, simply use
`Connection.as(ReasoningConnection.class)`.

=== Explanations

The explain functions of
`com.complexible.stardog.api.reasoning.ReasoningConnection` now return
`com.complexible.stardog.reasoning.Proof` objects. The
`com.complexible.stardog.reasoning.Proof.getStatements()` function can be used
to get only the asserted statements which is equivalent to what explain
functions returned in 1.x.

=== Starting the server

In order to create a new server we use a `ServerBuilder` obtained via the method
`buildServer()` on `com.complexible.stardog.Stardog`; configuration options can
be `set(Option<T>, T)` and the server is created for a particular address with
`bind`. The following example shows how to create a new embedded SNARL server.

[source, Java]
----
Server aServer = Stardog
            		.buildServer()
            		.bind(SNARLProtocol.EMBEDDED_ADDRESS)
            		.start();
----

When programmatically starting a Stardog server in your application, you *must*
stop the server when you're done with it, otherwise it can prevent the JVM from
exiting.

=== Protocols

As of Stardog 2.0, Stardog's supported protocols, SNARL & HTTP, now run on the
*same* port.  There is no need to start separate servers or specify different
ports.  The new unified Stardog server will automatically detect what protocol
you are using and forward the traffic appropriately.  The default port for the
server remains `5820`.

=== Command line

The global options `--home`, `--logfile`, `--disable-security` for `server
start` command have been turned into regular options. See the `stardog-admin
help server start` for details.
